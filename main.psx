.psx
.create "main.bin", 0x80010000


.org 0x80010000
.align 4
j main
nop

.include "math.psx"

.align 4
main:
    ; Save stack pointer, frame pointer, and return address
    subiu   $sp,$sp,24
    sw      $ra,20($sp)
    sw      $fp,16($sp)
    move    $fp,$sp

    jal     init_gpu
    nop

    ; Init GTe
    mfc0    $v0, $sr
    li      $v1, 1
    sll     $v1, 30
    or      $v0, $v1
    mtc0    $v0, $sr

    ; Infinite loop
    move    $a2, $zero
    li      $a3, 0xfffff
    li      $t0, 0x00000
@@main_loop:
    ; Increase move offset
    addi    $a2, 1

    ; Clear screen
    li      $v0, 0x2
    sll     $v0, 24
    ori     $v0, 0x0 ; Black
    sw      $v0, 0x1f801810
    nop
    li      $v0, 0x0
    sw      $v0, 0x1f801810
    nop
    li      $v0, 0x01ff03ff
    sw      $v0, 0x1f801810
    nop

; c 0 s
; 0 1

    ; Load sine $t0
    la      $t7, tbl_sine
    sll     $t3, $t0, 1
    add     $s1, $t3, $t7
    lhu     $s3, 0($s1)
    nop
    srl     $t3, 1
    move    $a0, $t0
    jal math_sin
    move    $s3, $a0
    ;$s3 now has sine
    move    $a0, $t0
    jal math_cos
    move    $s2, $v0
    ; $s2 now has cos

    ; Set H value
    li      $s5, 0x30
    ctc2    $s5, $26

    ; Fill out GTE rotation matrix
    sub     $s3, $zero, $s3
    ctc2    $s2, $0
    ctc2    $s3, $1
    addi    $s4, $zero, 0x1000
    ctc2    $s4, $2
    sub     $s3, $zero, $s3
    ctc2    $s3, $3
    ctc2    $s2, $4

    ; Set our translation vector
    li      $s3, 0x80
    ctc2    $s3, $7


    ;li      $s3, 0x1000
    ;ctc2    $s3, $0
    ;;ctc2    $s3, $1
    ;ctc2    $s3, $2
    ;;ctc2    $s3, $3
    ;ctc2    $s3, $4

    ;; Perform rotation of vertex 0
    ; Load vertex
    la      $s2, d_3d_triange_v0
    lw      $s0, 0($s2)
    lhu     $s1, 4($s2)

    ; Pass to GTE
    mtc2    $s0, $0
    mtc2    $s1, $1

    ;; Perform rotation of vertex 1
    ; Load vertex
    la      $s2, d_3d_triange_v1
    lw      $s0, 0($s2)
    lhu     $s1, 4($s2)

    ; Pass to GTE
    mtc2    $s0, $2
    mtc2    $s1, $3

    ;; Perform rotation of vertex 2
    ; Load vertex
    la      $s2, d_3d_triange_v2
    lw      $s0, 0($s2)
    lhu     $s1, 4($s2)

    ; Pass to GTE
    mtc2    $s0, $4
    mtc2    $s1, $5

    ; Execute rotation
    cop2    0x280030 ; v0 * rotmatrix

    ; Store result
    mfc2    $s0, $12
    mfc2    $s1, $13
    mfc2    $s2, $14
    sw      $s0, d_triange_v0
    sw      $s1, d_triange_v1
    sw      $s2, d_triange_v2

    ;; Draw a guroud shaded triangle
    li      $v0, 0x03000000
    sw      $v0, 0x1f801814
    nop
    li      $v0, 0x30
    sll     $v0, 24
    li      $v1, 0xff
    sll     $v1, 16
    or      $v0, $v0, $v1
    andi    $a2, 0xff
    or      $v0, $a2
    sw      $v0, 0x1f801810
    nop

    ; Vertex 0 pos
    lw      $v0, d_triange_v0
    nop
    li      $a0, 100
    sll     $a0, 16
    ori     $a0, 150
    add     $a0, $a1
    add     $v0, $a0
    sw      $v0, 0x1f801810
    nop

    ; Vertex 1 colour
    li      $v0, 0x0000ff00
    sw      $v0, 0x1f801810
    nop

    ; Vertex 1 pos
    lw      $v0, d_triange_v1
    li      $a0, 100
    sll     $a0, 16
    ori     $a0, 150
    add     $a0, $a1
    add     $v0, $a0
    sw      $v0, 0x1f801810
    nop

    ; Vertex 2 colour
    li      $v0, 0x000000ff
    sw      $v0, 0x1f801810
    nop

    ; Vertex 2 pos
    lw      $v0, d_triange_v2
    li      $a0, 100
    sll     $a0, 16
    ori     $a0, 150
    add     $a0, $a1
    add     $v0, $a0
    sw      $v0, 0x1f801810
    nop

    addi    $t0, 0x1
    andi    $t0, $t0, 0xff

    ; Start timer
    li      $a3, 0xffff
    ; Spin for a bit
@@spin:
    subi    $a3, 1
    bne     $a3, $zero, @@spin
    nop

    ; Back to the start of the main loop
    j       @@main_loop
    nop

    ; Restore and return
    move    $sp,$fp
    lw      $ra,20($sp)
    lw      $fp,16($sp)
    addiu   $sp,$sp,24
    jr      $ra
    nop

; write commands to the gpu_command port
gpu_comm:
    sll     $a0, 24
    or      $a0, $a1
    sw      $a0, 0x1f801814
    jr      $ra
    nop

; write commands to the gpu_data port
gpu_data:
    sll     $a0, 24
    or      $a0, $a1
    sw      $a0, 0x1f801810
    jr      $ra
    nop

; Init the gpu so we're ready to draw
init_gpu:
    ; Save the return address
    move    $s0, $ra

    ; Reset the GPU
    li      $a0, 0
    li      $a1, 0
    jal     gpu_comm
    nop
    ; Set the horizontal start/end
    li      $a0, 6
    li      $a1, 0xc56
    sll     $a1, 12
    ori     $a1, 0x250
    jal     gpu_comm
    nop
    ; Set the vertical start/end
    li      $a0, 7
    li      $a1, 0x100
    sll     $a1, 10
    ori     $a1, 0x10
    jal     gpu_comm
    nop
    ; Set display mode
    li      $a0, 8
    li      $a1, 0x21 ; 0b0010_0001
    jal     gpu_comm
    nop
    ; Set display offset
    li      $a0, 5
    li      $a1, 0x0
    jal     gpu_comm
    nop
    ; Set draw mode
    li      $a0, 0xe1
    li      $a1, 0x200
    jal     gpu_data
    nop
    ; Set draw area
    li      $a0, 0xe3
    li      $a1, 0x0
    jal     gpu_data
    nop
    ; Set draw area
    li      $a0, 0xe4
    li      $a1, 0x3BD
    sll     $a1, 8
    ori     $a1, 0x3F
    jal     gpu_data
    nop
    ; Set draw offset
    li      $a0, 0xe5
    li      $a1, 0x0
    jal     gpu_data
    nop
    ; Set DMA to CPU->GPU
    li      $a0, 4
    li      $a1, 0x2
    jal     gpu_comm
    nop
    ; Enable the display
    li      $a0, 0x3
    li      $a1, 0x0
    jal     gpu_comm
    nop

    ; Restore the return address, and return
    move    $ra, $s0
    jr      $ra
    nop

.align 4
d_triange_v0:
.halfword 0, -50
.align 4
d_triange_v1:
.halfword 50, 50
.align 4
d_triange_v2:
.halfword -50, 50

.align 4
d_3d_triange_v0:
.halfword 0, -0x50, 0x0
.align 4
d_3d_triange_v1:
.halfword 0x50, 0x50, 0x0
.align 4
d_3d_triange_v2:
.halfword -0x50, 0x50, 0x0

.close
