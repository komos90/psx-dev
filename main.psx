.psx
.create "main.bin", 0x80010000


.org 0x80010000
.align 4
j main
nop

; SINE TABLE
.align 2
tbl_sine:
.halfword 0x0000 ; 0x00
.halfword 0x00FF ; 0x01
.halfword 0x01FE ; 0x02
.halfword 0x02FB ; 0x03
.halfword 0x03F5 ; 0x04
.halfword 0x04EB ; 0x05
.halfword 0x05DC ; 0x06
.halfword 0x06C7 ; 0x07
.halfword 0x07AB ; 0x08
.halfword 0x0888 ; 0x09
.halfword 0x095C ; 0x0A
.halfword 0x0A27 ; 0x0B
.halfword 0x0AE7 ; 0x0C
.halfword 0x0B9D ; 0x0D
.halfword 0x0C47 ; 0x0E
.halfword 0x0CE5 ; 0x0F
.halfword 0x0D76 ; 0x10
.halfword 0x0DFA ; 0x11
.halfword 0x0E6F ; 0x12
.halfword 0x0ED6 ; 0x13
.halfword 0x0F2F ; 0x14
.halfword 0x0F78 ; 0x15
.halfword 0x0FB1 ; 0x16
.halfword 0x0FDB ; 0x17
.halfword 0x0FF5 ; 0x18
.halfword 0x1000 ; 0x19
.halfword 0x0FF9 ; 0x1A
.halfword 0x0FE4 ; 0x1B
.halfword 0x0FBE ; 0x1C
.halfword 0x0F88 ; 0x1D
.halfword 0x0F43 ; 0x1E
.halfword 0x0EEF ; 0x1F
.halfword 0x0E8C ; 0x20
.halfword 0x0E1A ; 0x21
.halfword 0x0D9A ; 0x22
.halfword 0x0D0D ; 0x23
.halfword 0x0C72 ; 0x24
.halfword 0x0BCC ; 0x25
.halfword 0x0B19 ; 0x26
.halfword 0x0A5B ; 0x27
.halfword 0x0993 ; 0x28
.halfword 0x08C1 ; 0x29
.halfword 0x07E7 ; 0x2A
.halfword 0x0704 ; 0x2B
.halfword 0x061B ; 0x2C
.halfword 0x052B ; 0x2D
.halfword 0x0437 ; 0x2E
.halfword 0x033E ; 0x2F
.halfword 0x0242 ; 0x30
.halfword 0x0143 ; 0x31
.halfword 0x0000 ; 0x32
.halfword 0x80BB ; 0x33
.halfword 0x81BB ; 0x34
.halfword 0x82B8 ; 0x35
.halfword 0x83B3 ; 0x36
.halfword 0x84AA ; 0x37
.halfword 0x859C ; 0x38
.halfword 0x8689 ; 0x39
.halfword 0x876F ; 0x3A
.halfword 0x884E ; 0x3B
.halfword 0x8925 ; 0x3C
.halfword 0x89F2 ; 0x3D
.halfword 0x8AB5 ; 0x3E
.halfword 0x8B6E ; 0x3F
.halfword 0x8C1B ; 0x40
.halfword 0x8CBD ; 0x41
.halfword 0x8D51 ; 0x42
.halfword 0x8DD8 ; 0x43
.halfword 0x8E51 ; 0x44
.halfword 0x8EBC ; 0x45
.halfword 0x8F19 ; 0x46
.halfword 0x8F66 ; 0x47
.halfword 0x8FA3 ; 0x48
.halfword 0x8FD2 ; 0x49
.halfword 0x8FF0 ; 0x4A
.halfword 0x9000 ; 0x4B
.halfword 0x8FFD ; 0x4C
.halfword 0x8FEB ; 0x4D
.halfword 0x8FC9 ; 0x4E
.halfword 0x8F98 ; 0x4F
.halfword 0x8F57 ; 0x50
.halfword 0x8F07 ; 0x51
.halfword 0x8EA8 ; 0x52
.halfword 0x8E3A ; 0x53
.halfword 0x8DBE ; 0x54
.halfword 0x8D34 ; 0x55
.halfword 0x8C9D ; 0x56
.halfword 0x8BF9 ; 0x57
.halfword 0x8B49 ; 0x58
.halfword 0x8A8E ; 0x59
.halfword 0x89C9 ; 0x5A
.halfword 0x88FA ; 0x5B
.halfword 0x8821 ; 0x5C
.halfword 0x8741 ; 0x5D
.halfword 0x8659 ; 0x5E
.halfword 0x856B ; 0x5F
.halfword 0x8478 ; 0x60
.halfword 0x8380 ; 0x61
.halfword 0x8285 ; 0x62
.halfword 0x8187 ; 0x63
.halfword 0x0000 ; 0x64

.align 4
main:
    ; Save stack pointer, frame pointer, and return address
    subiu   $sp,$sp,24
    sw      $ra,20($sp)
    sw      $fp,16($sp)
    move    $fp,$sp

    jal     init_gpu
    nop

    ; Init GTe
    mfc0    $v0, $sr
    li      $v1, 1
    sll     $v1, 30
    or      $v0, $v1
    mtc0    $v0, $sr

    ; Infinite loop
    move    $a2, $zero
    li      $a3, 0xfffff
    li      $t0, 0x00100
@@main_loop:
    ; Increase move offset
    addi    $a2, 1

    ; Clear screen
    li      $v0, 0x2
    sll     $v0, 24
    ori     $v0, 0x0 ; Black
    sw      $v0, 0x1f801810
    nop
    li      $v0, 0x0
    sw      $v0, 0x1f801810
    nop
    li      $v0, 0x01ff03ff
    sw      $v0, 0x1f801810
    nop

; c 0 s
; 0 1

    ; Load sine $t0
    la      $t7, tbl_sine
    srl     $t3, $t0, 7
    add     $s1, $t3, $t7
    lhu     $s2, 0($s1)
    nop
    sll     $t3, 1
    ;$s2 now has sine
    addi    $t3, 0x19
    blt     $t3, 0x64, @@no_correction
    nop
    subi    $t3, 0x64
@@no_correction:
    srl     $t3, 1
    add     $s1, $t3, $t7
    lhu     $s3, 0($s1)
    nop

    ; Fill out GTE rotation matrix
    xori    $s3, 0x8000
    ctc2    $s2, $0
    ctc2    $s3, $1
    addi    $s4, $zero, 0x1
    ctc2    $s4, $2
    xori    $s3, 0x8000
    ctc2    $s3, $3
    ctc2    $s2, $4

    ;; Perform rotation of vertex 0
    ; Load vertex
    la      $s2, d_3d_triange_v0
    lw      $s0, 0($s2)
    lhu     $s1, 4($s2)

    ; Pass to GTE
    mtc2    $s0, $0
    mtc2    $s1, $1

    ; Execute rotation
    cop2    0x0486012 ; v0 * rotmatrix

    ; Get our values back
    mfc2    $s3, $9
    mfc2    $s4, $10
    la      $s5, d_triange_v0

    ; Convert to screen coords
    andi     $s3, 0xff00
    andi     $s4, 0xff00
    sra     $s3, 8
    sll     $s4, 8
    or      $s3, $s4

    ; And store them
    sw      $s3, 0($s5)

    ;; Perform rotation of vertex 1
    ; Load vertex
    la      $s2, d_3d_triange_v1
    lw      $s0, 0($s2)
    lhu     $s1, 4($s2)

    ; Pass to GTE
    mtc2    $s0, $0
    mtc2    $s1, $1

    ; Execute rotation
    cop2    0x0486012 ; v0 * rotmatrix

    ; Get our values back
    mfc2    $s3, $9
    mfc2    $s4, $10
    la      $s5, d_triange_v1

    ; Convert to screen coords
    andi     $s3, 0xff00
    andi     $s4, 0xff00
    sra     $s3, 8
    sll     $s4, 8
    or      $s3, $s4

    ; And store them
    sw      $s3, 0($s5)

    ;; Perform rotation of vertex 2
    ; Load vertex
    la      $s2, d_3d_triange_v2
    lw      $s0, 0($s2)
    lhu     $s1, 4($s2)

    ; Pass to GTE
    mtc2    $s0, $0
    mtc2    $s1, $1

    ; Execute rotation
    cop2    0x0486012 ; v0 * rotmatrix

    ; Get our values back
    mfc2    $s3, $9
    mfc2    $s4, $10
    la      $s5, d_triange_v2

    ; Convert to screen coords
    andi     $s3, 0xff00
    andi     $s4, 0xff00
    sra     $s3, 8
    sll     $s4, 8
    or      $s3, $s4

    ; And store them
    sw      $s3, 0($s5)


    ;; Draw a guroud shaded triangle
    li      $v0, 0x03000000
    sw      $v0, 0x1f801814
    nop
    li      $v0, 0x30
    sll     $v0, 24
    li      $v1, 0xff
    sll     $v1, 16
    or      $v0, $v0, $v1
    andi    $a2, 0xff
    or      $v0, $a2
    sw      $v0, 0x1f801810
    nop

    ; Vertex 0 pos
    lw      $v0, d_triange_v0
    nop
    li      $a0, 100
    sll     $a0, 16
    ori     $a0, 150
    add     $a0, $a1
    add     $v0, $a0
    sw      $v0, 0x1f801810
    nop

    ; Vertex 1 colour
    li      $v0, 0x0000ff00
    sw      $v0, 0x1f801810
    nop

    ; Vertex 1 pos
    lw      $v0, d_triange_v1
    li      $a0, 100
    sll     $a0, 16
    ori     $a0, 150
    add     $a0, $a1
    add     $v0, $a0
    sw      $v0, 0x1f801810
    nop

    ; Vertex 2 colour
    li      $v0, 0x000000ff
    sw      $v0, 0x1f801810
    nop

    ; Vertex 2 pos
    lw      $v0, d_triange_v2
    li      $a0, 100
    sll     $a0, 16
    ori     $a0, 150
    add     $a0, $a1
    add     $v0, $a0
    sw      $v0, 0x1f801810
    nop

    addi    $t0, 0x00100
    subi    $t1, $t0, 0x6400
    blez    $t1, @@skip0
    nop
    move    $t0, $zero
@@skip0:
    ; Start timer
    li      $a3, 0xfffff
    ; Spin for a bit
@@spin:
    subi    $a3, 1
    bne     $a3, $zero, @@spin
    nop

    ; Back to the start of the main loop
    j       @@main_loop
    nop

    ; Restore and return
    move    $sp,$fp
    lw      $ra,20($sp)
    lw      $fp,16($sp)
    addiu   $sp,$sp,24
    jr      $ra
    nop

; write commands to the gpu_command port
gpu_comm:
    sll     $a0, 24
    or      $a0, $a1
    sw      $a0, 0x1f801814
    jr      $ra
    nop

; write commands to the gpu_data port
gpu_data:
    sll     $a0, 24
    or      $a0, $a1
    sw      $a0, 0x1f801810
    jr      $ra
    nop

; Init the gpu so we're ready to draw
init_gpu:
    ; Save the return address
    move    $s0, $ra

    ; Reset the GPU
    li      $a0, 0
    li      $a1, 0
    jal     gpu_comm
    nop
    ; Set the horizontal start/end
    li      $a0, 6
    li      $a1, 0xc56
    sll     $a1, 12
    ori     $a1, 0x250
    jal     gpu_comm
    nop
    ; Set the vertical start/end
    li      $a0, 7
    li      $a1, 0x100
    sll     $a1, 10
    ori     $a1, 0x10
    jal     gpu_comm
    nop
    ; Set display mode
    li      $a0, 8
    li      $a1, 0x21 ; 0b0010_0001
    jal     gpu_comm
    nop
    ; Set display offset
    li      $a0, 5
    li      $a1, 0x0
    jal     gpu_comm
    nop
    ; Set draw mode
    li      $a0, 0xe1
    li      $a1, 0x200
    jal     gpu_data
    nop
    ; Set draw area
    li      $a0, 0xe3
    li      $a1, 0x0
    jal     gpu_data
    nop
    ; Set draw area
    li      $a0, 0xe4
    li      $a1, 0x3BD
    sll     $a1, 8
    ori     $a1, 0x3F
    jal     gpu_data
    nop
    ; Set draw offset
    li      $a0, 0xe5
    li      $a1, 0x0
    jal     gpu_data
    nop
    ; Set DMA to CPU->GPU
    li      $a0, 4
    li      $a1, 0x2
    jal     gpu_comm
    nop
    ; Enable the display
    li      $a0, 0x3
    li      $a1, 0x0
    jal     gpu_comm
    nop

    ; Restore the return address, and return
    move    $ra, $s0
    jr      $ra
    nop

.align 4
d_triange_v0:
.halfword 0, -50
.align 4
d_triange_v1:
.halfword 50, 50
.align 4
d_triange_v2:
.halfword -50, 50

.align 4
d_3d_triange_v0:
.halfword 0, 0x9000, 0
.align 4
d_3d_triange_v1:
.halfword 0x1000, 0x1000, 0
.align 4
d_3d_triange_v2:
.halfword 0x9000, 0x1000, 0

.close
