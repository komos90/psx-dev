.psx
.create "main.bin", 0x80010000

.align 4
j @main
nop

.include "math.psx"

@gpu_comm_addr equ 0x1f801814
@gpu_data_addr equ 0x1f801810
@dma_primary_control equ 0x1f8010f0
@dma_block_control equ 0x1f8010e4
@d6_madr equ 0x1f8010e0
@d6_bcr equ 0x1f8010e4
@d6_chsr equ 0x1f8010e8
@d2_madr equ 0x1f8010a0
@d2_bcr equ 0x1f8010a4
@d2_chsr equ 0x1f8010a8
@ordering_table_size equ 0x100

.align 4
; write commands to the gpu_command port
@gpu_comm:
    sll     $a0, 24
    or      $a0, $a1
    sw      $a0, @gpu_comm_addr
    jr      $ra
    nop

; write commands to the @gpu_data port
@gpu_data:
    sll     $a0, 24
    or      $a0, $a1
    sw      $a0, @gpu_data_addr
    jr      $ra
    nop

; Init the gpu so we're ready to draw
@init_gpu:
    subiu   $sp, 4
    sw      $ra, 0($sp)

    ; Reset the GPU
    li      $a0, 0
    li      $a1, 0
    jal     @gpu_comm
    nop
    ; Set the horizontal start/end
    li      $a0, 6
    li      $a1, 0xc56
    sll     $a1, 12
    ori     $a1, 0x250
    jal     @gpu_comm
    nop
    ; Set the vertical start/end
    li      $a0, 7
    li      $a1, 0x100
    sll     $a1, 10
    ori     $a1, 0x10
    jal     @gpu_comm
    nop
    ; Set display mode
    li      $a0, 8
    li      $a1, 0x21 ; 0b0010_0001
    jal     @gpu_comm
    nop
    ; Set display offset
    li      $a0, 5
    li      $a1, 0x0
    jal     @gpu_comm
    nop
    ; Set draw mode
    li      $a0, 0xe1
    li      $a1, 0x200
    jal     @gpu_data
    nop
    ; Set draw area
    li      $a0, 0xe3
    li      $a1, 0x0
    jal     @gpu_data
    nop
    ; Set draw area
    li      $a0, 0xe4
    li      $a1, 0x3BD
    sll     $a1, 8
    ori     $a1, 0x3F
    jal     @gpu_data
    nop
    ; Set draw offset
    li      $a0, 0xe5
    li      $a1, 0b111111100010110000
    jal     @gpu_data
    nop
    ; Set DMA to CPU->GPU
    li      $a0, 4
    li      $a1, 0x2
    jal     @gpu_comm
    nop
    ; Enable the display
    li      $a0, 0x3
    li      $a1, 0x0
    jal     @gpu_comm
    nop

    ; Restore the return address, and return
    lw      $ra, 0($sp)
    addiu   $sp, 4
    jr      $ra
    nop

@clear_screen:
    li      $t0, 0x2000000
    sw      $t0, @gpu_data_addr
    sw      $zero, @gpu_data_addr
    li      $t0, 0x01ff03ff ; Screen bottom right coords
    sw      $t0, @gpu_data_addr
    jr      $ra
    nop

;! $a0: pointer to the entry to insert
;! $a1: OT index (Z value)
;! $a2: packet size
@ot_insert:
    ; address is 3 bytes
    ;! $t0: address_mask
    li      $t3, 0x00ffffff
    and     $a0, $t3
    ; load ordering table pointer
    ;! $t0: ordering_table
    la      $t0, @ordering_table
    and     $t0, $t3

    ; Align our depth index to 4 bytes
    sll     $a1, 2
    ; Move to absolute address for our depth index
    addu    $t0, $a1
    ;! $t0: abs_ot_addr
    ;! $a1: UNUSED
    ; TODO: get otloopaddr
    ; NOTE: should OR so we retain the packet size
    ; if abs_ot_addr{$t0} == 0:
    bne     $zero, $a1, @@else0
    nop
    ;      $t2 = 0x00ffffff
    ;! $t2: next_sentinel_ot
    li      $t2, 0x00ffffff
    j       @@skipelse0
    nop
    ; else:
@@else0:
    ;      next_sentinel_ot{$t2} = abs_ot_addr{$t0} - 4
    subi    $t2, $t0, 4
@@skipelse0:
    ;      cur_ptr{$t1} = (abs_ot_addr{$t0})
    ;      t4 = t0 & 0x00ffffff
    li      $t3, 0x00ffffff
    and     $t4, $t0, $t3
    lw      $t1, 0($t4)
    nop
    and     $t1, $t3
    ;! $t1: cur_ptr
    ; while cur_ptr{$t1} != next_sentinel_ot{$t2}:
    beq     $t1, $t2, @@loop0end
    nop
@@loop0:
    ;    abs_ot_addr{$t0} = cur_ptr{$t1}
    move    $t0, $t1
    ;    cur_ptr{$t1} = (abs_ot_addr{$t0})
    and     $t4, $t0, $t3
    lw      $t1, ($t4)
    nop
    and     $t1, $t3
    bne     $t1, $t2, @@loop0
    nop
@@loop0end:
    ; (abs_ot_addr{$t0}) = prim_to_insert_addr{$a0}
    and     $t4, $t0, $t3
    lw      $t0, ($t4)
    and     $a0, $t3
    li      $t1, 0xff000000
    and     $t0, $t1
    or      $a0, $t0
    sw      $a0, ($t4)
    ; (prim_to_insert_addr{$a0}) = next_sentinel_ot{$t2}
    and     $a0, $t3
    lw      $t0, ($a0)
    and     $t2, $t3
    or      $t2, $t0
    sw      $t2, ($a0)

    jr      $ra
    nop

@main:
    subiu   $sp,$sp,4
    sw      $ra,0($sp)

    jal     @init_gpu
    nop

    ; Init GTe
    mfc0    $t0, $sr
    li      $t1, 0x40000000
    or      $t0, $t1
    mtc0    $t0, $sr

    li      $t0, 0x100
    ctc2    $t0, $24
    ctc2    $t0, $25

    ; Enable DMA
    li      $t0, 0x08000800
    sw      $t0, @dma_primary_control

    ; Set DMA to CPU->GPU
    li      $a0, 4
    li      $a1, 0x3
    jal     @gpu_comm
    nop

    ; Prepare ordering table
    li      $t0, @ordering_table_last
    sw      $t0, @d6_madr
    li      $t0, @ordering_table_size
    sw      $t0, @dma_block_control

    ; Infinite loop
    li      $s0, 0x00000
@@main_loop:
    ; Set DMA to GPU->CPU
    li      $a0, 4
    li      $a1, 0x3
    jal     @gpu_comm
    nop
    ; Generate / regenerate ordering table
    li      $t0, 0x11000002
    sw      $t0, @d6_chsr

    ; Set DMA to GPU->CPU
    li      $a0, 4
    li      $a1, 0x2
    jal     @gpu_comm
    nop

    jal     @clear_screen
    nop

    ; Calculate sine & cos for rot mat
    move    $a0, $s0
    jal     math_sin
    nop
    move    $t0, $v0

    move    $a0, $s0
    jal     math_cos
    nop
    move    $t1, $v0

    sub     $t2, $zero, $t0

    ; Populate axis rotation matrices
    la      $t3, @y_axis_rot_mat
    sh      $t1, ($t3)
    addiu   $t3, 2 * 2
    sh      $t0, ($t3)
    addiu   $t3, 2 * 4
    sh      $t2, ($t3)
    addiu   $t3, 2 * 2
    sh      $t1, ($t3)
    la      $t3, @z_axis_rot_mat
    sh      $t1, ($t3)
    addiu   $t3, 2 * 1
    sh      $t0, ($t3)
    addiu   $t3, 2 * 2
    sh      $t2, ($t3)
    addiu   $t3, 2 * 1
    sh      $t1, ($t3)

    ; Combine x & y rotations
    la $a0, @y_axis_rot_mat
    la $a1, @z_axis_rot_mat
    la $a2, @mat_o
    jal math_matrix_mul
    nop

    ;; Fill out GTE rotation matrix
    la      $t0, @mat_o
    lw      $t1, 0($t0)
    lw      $t2, 4($t0)
    lw      $t3, 8($t0)
    lw      $t4, 12($t0)
    lh      $t5, 16($t0)
    ctc2    $t1, $0
    ctc2    $t2, $1
    ctc2    $t3, $2
    ctc2    $t4, $3
    ctc2    $t5, $4

    ;move    $t3, $t0
    ;sub     $t3, $zero, $t3
    ;sll     $t3, 16
    ;or      $t3, $t1
    ;ctc2    $t3, $0
    ;sll     $t0, 16
    ;ctc2    $t0, $1
    ;li      $t2, 0x1000
    ;ctc2    $t1, $2
    ;ctc2    $zero, $3
    ;ctc2    $t2, $4

    ; Test matrix mul
    ;la $a0, @mat_a
    ;la $a1, @mat_b
    ;la $a2, @mat_o
    ;jal math_matrix_mul
    ;nop

    ; Set H value
    li      $t0, 0x80
    ctc2    $t0, $26

    ; Set our translation vector
    li      $t0, 0x200
    ctc2    $t0, $7

    la      $s2, @d_icosphere_mesh
    lw      $s1, @d_icosphere_mesh
    addi    $s2, 4
    move    $s3, $zero
@@for_each_tri:
    ;; Perform rotation of vertex 0
    ; Load vertex
    lw      $t1, 0($s2)
    lhu     $t2, 4($s2)
    addi    $s2, 8

    ; Pass to GTE
    mtc2    $t1, $0
    mtc2    $t2, $1

    ;; Perform rotation of vertex 1
    ; Load vertex
    lw      $t1, 0($s2)
    lhu     $t2, 4($s2)
    addi    $s2, 8

    ; Pass to GTE
    mtc2    $t1, $2
    mtc2    $t2, $3

    ;; Perform rotation of vertex 2
    ; Load vertex
    lw      $t1, 0($s2)
    lhu     $t2, 4($s2)
    addi    $s2, 8

    ; Pass to GTE
    mtc2    $t1, $4
    mtc2    $t2, $5

    ; Execute rotation
    cop2    0x280030

    ; Store result
    mfc2    $t0, $12
    mfc2    $t1, $13
    mfc2    $t2, $14
    mfc2    $t3, $16
    mfc2    $t4, $17
    mfc2    $t5, $18

    ; Save primitive & put in OT
    la      $t7, @primitives
    addu    $t7, $s3
    li      $t8, 0x06000000
    sw      $t8, 0($t7)
    li      $t8, 0x30000000
    move    $t8, $t3
    srl     $t8, 3
    li      $t9, 0x30000000
    or      $t8, $t9
    sw      $t8, 4($t7)
    sw      $t0, 8($t7)
    move    $t8, $t4
    ;sll     $t8, 8
    srl     $t8, 3
    sw      $t8, 12($t7)
    sw      $t1, 16($t7)
    move    $t8, $t5
    ;sll     $t8, 16
    srl     $t8, 3
    sw      $t8, 20($t7)
    sw      $t2, 24($t7)

    ; Average vertex depths
    sub     $t0, $t3, $t4
    sra     $t0, 1
    add     $t4, $t0
    sub     $t0, $t5, $t4
    sra     $t0, 1
    add     $t4, $t0


    ; Insert into OT
    move    $a0, $t7
    move    $a1, $t4; random z value, should average
    srl     $a1, 4
    li      $a2, 0x6
    jal     @ot_insert
    nop

    addiu   $s3, 4 * 8
    subiu   $s1, 1
    ; Branch back to the start of the loop for the rest of the polys
    bne     $s1, $zero, @@for_each_tri
    nop

    ; Set d2_madr
    lw      $t0, @d6_madr
    nop
    sw      $t0, @d2_madr

    ; Set d2_bcr
    sw      $zero, @d2_bcr

    ; Initiate DMA transfer:
    li      $t0, 0x01000401; set link mode, memory->GPU, DMA enable
    sw      $t0, @d2_chsr

    ; Increment rotation angle % 0xff
    addi    $s0, 0x1
    andi    $s0, $s0, 0xff

    ; Start timer
    li      $t0, 0xfffff
    ; Spin for a bit
@@spin:
    subi    $t0, 1
    bne     $t0, $zero, @@spin
    nop

    ; Back to the start of the @main loop
    j       @@main_loop
    nop

    ; Restore and return
    lw      $ra,0($sp)
    addiu   $sp,$sp,4
    jr      $ra
    nop

;.align 4
;@point_light
;.

.align 4
@mat_x_axis_rot_mat:
;.fill 2 * 9
; | 1 0 0 |
; | 0 x x |
; | 0 x x |
.halfword 0x1 << 12, 0x0 << 12, 0x0 << 12
.halfword 0x0 << 12, 0x0 << 12, 0x0 << 12
.halfword 0x0 << 12, 0x0 << 12, 0x0 << 12
.align 4
@y_axis_rot_mat:
;.fill 2 * 9
; | x 0 x |
; | 0 1 0 |
; | x 0 x |
.halfword 0x0 << 12, 0x0 << 12, 0x0 << 12
.halfword 0x0 << 12, 0x1 << 12, 0x0 << 12
.halfword 0x0 << 12, 0x0 << 12, 0x0 << 12
.align 4
@z_axis_rot_mat:
;.fill 2 * 9
; | x x 0 |
; | x x 0 |
; | 0 0 1 |
.halfword 0x0 << 12, 0x0 << 12, 0x0 << 12
.halfword 0x0 << 12, 0x0 << 12, 0x0 << 12
.halfword 0x0 << 12, 0x0 << 12, 0x1 << 12
.align 4
@mat_a:
;.fill 2 * 9
.halfword 0x1 << 8, 0x2 << 8, 0x3 << 8
.halfword 0x4 << 8, 0x5 << 8, 0x6 << 8
.halfword 0x7 << 8, 0x8 << 8, 0x9 << 8
.align 4
@mat_b:
;.fill 2 * 9
.halfword 0x7 << 8, 0x4 << 8, 0x2 << 8
.halfword 0x3 << 8, 0x5 << 8, 0x2 << 8
.halfword 0x1 << 8, 0x2 << 8, 0x3 << 8
.align 4
@mat_o:
.fill 2 * 9

.align 4
@d_triange_v0_xy:
.word 0
@d_triange_v0_z:
.word 0
@d_triange_v1_xy:
.word 0
@d_triange_v1_z:
.word 0
@d_triange_v2_xy:
.word 0
@d_triange_v2_z:
.word 0

.align 4
@ordering_table:
.fill (@ordering_table_size - 1) * 4
@ordering_table_last:
.word 0

.align 4
@d_icosphere_mesh:
.incbin "raw_assets/meshes/monkey.pxm"

; TODO: replace with frame scratch pad allocator
.align 4
@primitives:
;.fill (@ordering_table_size * 4 * 8)

.align 0x800
.close

